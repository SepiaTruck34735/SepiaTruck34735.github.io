<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Minecraft-Sep的竞赛笔记书</title>
    <link href="/2024/01/31/Minecraft-Sep%E7%9A%84%E7%AB%9E%E8%B5%9B%E7%AC%94%E8%AE%B0%E4%B9%A6/"/>
    <url>/2024/01/31/Minecraft-Sep%E7%9A%84%E7%AB%9E%E8%B5%9B%E7%AC%94%E8%AE%B0%E4%B9%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>本作品的内容借鉴了<a href="https://www.luogu.com.cn/team/12013">中山市华辰实验中学</a>的信息学竞赛学案，同时感谢初一信竞队的<a href="https://www.luogu.com.cn/user/200518">谢老师</a>以及同学们给了我极大的帮助！</p><p>编写：<a href="https://www.luogu.com.cn/user/942118">Minecraft-Sep</a></p><p>图床代理：<a href="https://img.zshfoj.com/">img.zshfoj.com</a></p><p>老师：<a href="https://www.luogu.com.cn/user/200518">Mr.谢</a></p><p>如果有不足之处，敬请多加指正！谢谢！</p><h1 id="1-文件与结构体"><a href="#1-文件与结构体" class="headerlink" title="1.文件与结构体"></a>1.文件与结构体</h1><p><img src="https://img.zshfoj.com/7707e0a2e501c9bf80df368f62f66684f717e968048dda5e2e35041426ef25e5.png"></p><h1 id="2-队列"><a href="#2-队列" class="headerlink" title="2.队列"></a>2.队列</h1><p><img src="https://img.zshfoj.com/58820bdf86fe54db6ac3ec446f6b678c27e7d67e0cd76063f72a4ea733886a75.png"></p><p><img src="https://img.zshfoj.com/1e64e490e059d2dc538d9c5fa393029b90a15cdcff99eeafbab2aa35275834d1.png"></p><h1 id="4-栈"><a href="#4-栈" class="headerlink" title="4.栈"></a>4.栈</h1><p><img src="https://img.zshfoj.com/a759f1cf90390a3924c3d3584894eab6ce48781aa68e6aec2d8410822deeacfd.png"></p><h1 id="5-树与二叉树"><a href="#5-树与二叉树" class="headerlink" title="5.树与二叉树"></a>5.树与二叉树</h1><p><img src="https://img.zshfoj.com/e2353afcd18590147754377060696e22d5b447af12c500b6f89b444c7f9d8bb6.png"></p><p><img src="https://img.zshfoj.com/e6fa7d0b66a7883fce3c275f9b28a2d3b224e20743b15e0fb2c23375bbb433e8.png"></p><h1 id="6-算法（基础）"><a href="#6-算法（基础）" class="headerlink" title="6.算法（基础）"></a>6.算法（基础）</h1><p><img src="https://img.zshfoj.com/6b2100489d84c69aec228d4b2167a70b70c6b54ca3789c50a6b26afdfb5960ca.png"></p><p><img src="https://img.zshfoj.com/5f483ff11e35ed5b6305cb5bba2fe2ad3dafef1936b6c31f957b9d8b35accb5c.png"></p><p><img src="https://img.zshfoj.com/147acaaa3b5de438ce551a23c6065bb187b2b829e7434a418483a6d26df8bfbf.png"></p><p><img src="https://img.zshfoj.com/ef192208e5fa823da4ee6fa04df890a868e4d00b838c4e44d9a55002024cf3f2.png"></p><p><img src="https://img.zshfoj.com/a8fb9cd64e58d35ea5459ce3b7d7681e2e435fc3629543b3368a9af64f46b8a3.png"></p><h1 id="7-贪心、分治、DFS"><a href="#7-贪心、分治、DFS" class="headerlink" title="7.贪心、分治、DFS"></a>7.贪心、分治、DFS</h1><p><img src="https://img.zshfoj.com/a4cc429450baa6d64f25fbb034203fa0f5e417aca78f28a08c44f97f27935655.png"></p><p><img src="https://img.zshfoj.com/1bf4d006e19963a7436fbf9c6a2a9a44c046fa135a1e3bc477641889a334867d.png"></p><p><img src="https://img.zshfoj.com/3bffeb8ea33de6342ec4f7488dfa91dadbf7a19960905303963633ca673cc524.png"></p><p><img src="https://img.zshfoj.com/72f6d60a8cf77c3e4bebe5e5a207e2a67882692bcf5a62735c5485b4b833fcd2.png"></p><h1 id="8-递归与递推"><a href="#8-递归与递推" class="headerlink" title="8.递归与递推"></a>8.递归与递推</h1><p><img src="https://img.zshfoj.com/984a1e35f8cec62ed4515cac4c18339287c0319889a3b329b76119cc94426998.png"></p><p><img src="https://img.zshfoj.com/e3788583d403db574783a889a50a38d52e0c736a97c71192cd6b4e53d5612f7b.png"></p><h1 id="9-BFS"><a href="#9-BFS" class="headerlink" title="9.BFS"></a>9.BFS</h1><p><img src="https://img.zshfoj.com/45ed44773337856930c2bb06f9254cc58227d386e567b6c3c1fa9190ac0b4925.png"></p><p><img src="https://img.zshfoj.com/c153965a49b0eaf5feb77deaa030670be87876ab9d8630044241ea2f88d67961.png"></p><p><img src="https://img.zshfoj.com/75781dd2d170243ab0c67a16b7afcd96cad49d3ca8272e219b31dd226a043261.png"></p><p><img src="https://img.zshfoj.com/376dc19c6f7302d10060fde3285dc16a85a0f674b75eab7e405e47f80d953011.png"></p><p><img src="https://img.zshfoj.com/566c19308b208c54b575b5f35a4981777e0bf6b8526171ec98cad82502a78b6b.png"></p><p><img src="https://img.zshfoj.com/7e1b66de2f16cd0914b7b022f2e6e3840ea0d7698cb9a4a3fee0df1be3849de6.png"></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>信息竞赛</tag>
      
      <tag>2024</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++七大经典排序算法详解</title>
    <link href="/2024/01/30/C-%E4%B8%83%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <url>/2024/01/30/C-%E4%B8%83%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="C-七大经典排序算法详解（转）"><a href="#C-七大经典排序算法详解（转）" class="headerlink" title="C++七大经典排序算法详解（转）"></a>C++七大经典排序算法详解（转）</h1><p>前言：排序是将一组数据，按照指定的顺序或要求来进行排列的过程。是数据结构相关课程和内容较为重要和核心的内容之一，常常作为考试题和面试题目来考察学生和面试者，因此熟练掌握经典的<a href="https://so.csdn.net/so/search?q=%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95&spm=1001.2101.3001.7020">排序算法</a>原理和代码实现是非常重要的<br>本文介绍了几大较为经典的排序算法：插入、希尔、选择、堆、冒泡、快速和归并排序</p><p>各种排序算法动图解析<a href="https://www.cnblogs.com/onepixel/articles/7674659.html">请参考</a></p><p><img src="https://img.zshfoj.com/202ceb2dbe9af3db167f6e079a4317160c7181050244f2d7e6c6bc76bb4ade42.png" alt="202ceb2dbe9af3db167f6e079a4317160c7181050244f2d7e6c6bc76bb4ade42.png (1355×904) (zshfoj.com)"></p><p><strong>各种排序算法复杂度对比</strong><br><a href="https://so.csdn.net/so/search?q=%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F&spm=1001.2101.3001.7020">冒泡排序</a>：两两比较，将大的元素不断后移；<br>选择排序：在一次遍历中，选择最小的元素，和从起始位置开始的元素交换；<br>插入排序：选择一个元素，若此元素比前一个元素大，while循环不断左移找到它的位置。<br>希尔排序：在插入排序的基础之上加入了一个gap步长进行排序<br>归并排序：数组分治，将有序的子数组合并<br>快速排序：在数组中选择一个基准找到它的位置，接着从基准的两边采用同样的方法分治。<br>堆排序：先对整个数组构建大顶堆，接着从根节点开始不断调整。</p><h2 id="冒泡排序法"><a href="#冒泡排序法" class="headerlink" title="冒泡排序法"></a>冒泡排序法</h2><p>冒泡排序是所有排序算法中相对简单且容易理解的算法，它的核心思想：通过for循环不断遍历需要排序的元素，依次比较相邻的两个元素，若不满足指定的顺序（可以从大到小排序，也可以反过来），就交换两个元素，直至完成排序。</p><ul><li>1.比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li><li>2.对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li><li>3.针对所有的元素重复以上的步骤，除了最后一个；</li><li>4.重复步骤1~3，直到排序完成。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<br>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n - i - <span class="hljs-number">1</span>; j++)<br>        &#123;<br>                    <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) <br>&#123;<br>                            <span class="hljs-type">int</span> temp = arr[j];<br>                            arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                            arr[j + <span class="hljs-number">1</span>] = temp;<br>                        &#125;<br>                 &#125;<br>         &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="冒泡排序优化："><a href="#冒泡排序优化：" class="headerlink" title="冒泡排序优化："></a><strong>冒泡排序优化：</strong></h4><p>用一个bool类型的变量来作为标志位，标记在某一轮遍历中是否发生过元素交换，如果未发生元素交换则证明当前数组已经排序完毕，直接中断此次循环。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-comment">//如果用一个flag来判断当前数组是否已经有序,有序则退出循环</span><br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n - i - <span class="hljs-number">1</span>; j++)<br>        &#123;<br>                    <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) <br>&#123;<br>                            <span class="hljs-type">int</span> temp = arr[j];<br>                            arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                            arr[j + <span class="hljs-number">1</span>] = temp;<br>                            flag = <span class="hljs-literal">false</span>;<br>                     &#125;<br>             &#125;<br>             <span class="hljs-keyword">if</span> (flag) <span class="hljs-keyword">break</span>;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><ul><li>1.初始状态：无序区为R[1…n]，有序区为空；</li><li>2.第i趟排序(i&#x3D;1,2,3…n-1)开始时，当前有序区和无序区分别为R[1…i-1]和R(i…n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1…i]和R[i+1…n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</li><li>3.n-1趟结束，数组有序化了。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SelectionSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br><span class="hljs-type">int</span> min = i;<br><span class="hljs-keyword">for</span>(j = i + <span class="hljs-number">1</span>; j &lt; len; j++)<br>&#123;<br><span class="hljs-keyword">if</span>(a[j] &lt; a[min])<br>min = j;<br>&#125;<br><span class="hljs-type">int</span> temp = a[min];<br>a[min] = a[i];<br>a[i] = temp;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><ul><li>1.从第一个元素开始，该元素可以认为已经被排序；</li><li>2.取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>3.如果该元素（已排序）大于新元素，将该元素移到下一位置；<br>-4.重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>5.将新元素插入到该位置后；</li><li>6.重复步骤2~5。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) <span class="hljs-comment">//第一个元素作为基准元素，从第二个元素开始把其插到正确的位置</span><br>   &#123;<br>  <span class="hljs-keyword">if</span>(a[i] &lt; a[i<span class="hljs-number">-1</span>]) <span class="hljs-comment">//如果第i个元素比前面的元素小</span><br>  &#123;<br>      <span class="hljs-type">int</span> j = i<span class="hljs-number">-1</span>;     <span class="hljs-comment">//需要判断第i个元素与前面的多个元素的大小，换成j继续判断</span><br>          <span class="hljs-type">int</span> x = a[i]; <span class="hljs-comment">//将第i个元素复制为哨兵</span><br>      <span class="hljs-keyword">while</span>(j &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; a[j]) <span class="hljs-comment">//找哨兵的正确位置，比哨兵大的元素依次后移</span><br>      &#123;<br>             a[j+<span class="hljs-number">1</span>] = a[j]; <br>         j--;<br>      &#125;<br>      a[j+<span class="hljs-number">1</span>] = x;  <span class="hljs-comment">//把哨兵插入到正确的位置</span><br>  &#125;   <br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。<br>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p><ul><li>1.选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk&#x3D;1；</li><li>2.按增量序列个数k，对序列进行k 趟排序；</li><li>3.每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shellSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> n)</span>  <span class="hljs-comment">//a -- 待排序的数组, n -- 数组的长度</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i,j,gap;   <span class="hljs-comment">// gap为步长，每次减为原来的一半。</span><br>    <span class="hljs-keyword">for</span> (gap = n / <span class="hljs-number">2</span>; gap &gt; <span class="hljs-number">0</span>; gap /= <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-comment">// 共gap个组，对每一组都执行直接插入排序</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span> ;i &lt; gap; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (j = i + gap; j &lt; n; j += gap) <br>            &#123; <br>                <span class="hljs-comment">// 如果a[j] &lt; a[j-gap]，则寻找a[j]位置，并将后面数据的位置都后移。</span><br>                <span class="hljs-keyword">if</span> (a[j] &lt; a[j - gap])<br>                &#123;<br>                    <span class="hljs-type">int</span> tmp = a[j];<br>                    <span class="hljs-type">int</span> k = j - gap;<br>                    <span class="hljs-keyword">while</span> (k &gt;= <span class="hljs-number">0</span> &amp;&amp; a[k] &gt; tmp)<br>                    &#123;<br>                        a[k + gap] = a[k];<br>                        k -= gap;<br>                    &#125;<br>                    a[k + gap] = tmp;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shellsort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> gap = n; gap &gt;= <span class="hljs-number">1</span>; gap /= <span class="hljs-number">2</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = gap; i &lt; n; i += gap) &#123;<br><span class="hljs-type">int</span> temp = arr[i];<br><span class="hljs-type">int</span> pre = i - gap;<br><span class="hljs-keyword">while</span> (pre &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[pre] &gt; temp) &#123;<br>arr[i] = arr[pre];<br>pre -= gap;<br>&#125;<br>arr[pre + gap] = temp;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。</p><ul><li>1.把长度为n的输入序列分成两个长度为n&#x2F;2的子序列；</li><li>2.对这两个子序列分别采用归并排序；</li><li>3.将两个排序好的子序列合并成一个最终的排序序列。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* 初始版本，升序排序 */</span><br><span class="hljs-comment">/* 时间复杂度：O(nlbn) 将n个待排序记录归并次数为lbn，一趟归并O(n)</span><br><span class="hljs-comment">   空间复杂度：O(n) 递归栈最大深度为[lbn] + 1 ，而辅助数组大小为n</span><br><span class="hljs-comment">   稳定：无论最好还是最坏情况时间复杂度都是O(nlbn)</span><br><span class="hljs-comment">*/</span><br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> temp[n]; <span class="hljs-comment">// 用一个额外的数组来进行排序</span><br>    <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>; <span class="hljs-comment">// 额外数组的起始位置</span><br>    <span class="hljs-type">int</span> mid = n / <span class="hljs-number">2</span>; <span class="hljs-comment">// mid将数组从中间划分，前后两半都有序</span><br>    <span class="hljs-type">int</span> first = <span class="hljs-number">0</span>, second = mid; <span class="hljs-comment">// 两个有序序列的起始位置</span><br> <span class="hljs-comment">//以下操作类似于将两个数组合并为一个有序数组</span><br>    <span class="hljs-keyword">while</span> (first &lt; mid &amp;&amp; second &lt; n)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (arr[first] &lt;= arr[second]) <span class="hljs-comment">// 比较两个序列</span><br>        <span class="hljs-comment">//这步操作相当于把第一个数组的值放到用来排序的数组，接着两个指针后移对下一个值进行操作</span><br>            temp[b++] = arr[first++];<br>        <span class="hljs-keyword">else</span><br>            temp[b++] = arr[second++];<br>    &#125;<br> <br>    <span class="hljs-keyword">while</span>(first &lt; mid)  <span class="hljs-comment">// 将剩余子序列复制到辅助序列中</span><br>            temp[b++] = arr[first++];<br>    <span class="hljs-keyword">while</span>(second &lt; n)<br>            temp[b++] = arr[second++];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-comment">// 辅助序列复制到原序列</span><br>        arr[i] = temp[i];<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) <span class="hljs-comment">// 递归出口</span><br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">MergeSort</span>(arr, n / <span class="hljs-number">2</span>); <span class="hljs-comment">// 对前半部分进行归并排序</span><br>        <span class="hljs-built_in">MergeSort</span>(arr + n / <span class="hljs-number">2</span>, n - n / <span class="hljs-number">2</span>); <span class="hljs-comment">// 对后半部分进行归并排序</span><br>        <span class="hljs-built_in">Merge</span>(arr, n); <span class="hljs-comment">// 归并两部分</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="快速排序（Quick-Sort）"><a href="#快速排序（Quick-Sort）" class="headerlink" title="快速排序（Quick Sort）"></a>快速排序（Quick Sort）</h2><p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。<br>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p><ul><li>1.从数列中挑出一个元素，称为 “基准”（pivot）；</li><li>2.重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>3.递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Quicksort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (low &lt; high) &#123;<br><span class="hljs-comment">//双指针，一个指向数组起始，一个指向数组末尾</span><br><span class="hljs-type">int</span> i = low;<br><span class="hljs-type">int</span> j = high;<br><span class="hljs-comment">//将数组的第一个元素作为key寻找它的位置</span><br><span class="hljs-comment">//key找到它的位置后，以它为分界线，左右两个数组分治</span><br><span class="hljs-type">int</span> key = arr[i];<br><span class="hljs-keyword">while</span> (i &lt; j) &#123;<br><span class="hljs-comment">//两个指针不相遇，且指针指向的值大于key时，不断左移</span><br><span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= key)<br>j--;<br><span class="hljs-keyword">if</span> (i &lt; j) arr[i] = arr[j];<br><span class="hljs-comment">//两个指针不相遇，且指针指向的值小于key时，不断右移</span><br><span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= key)<br>i++;<br><span class="hljs-keyword">if</span> (i &lt; j) arr[j] = arr[i];<br>&#125;<br><span class="hljs-comment">//将key放在适合的位置</span><br>arr[i] = key;<br><span class="hljs-comment">//分治</span><br><span class="hljs-built_in">Quicksort</span>(arr, low, i - <span class="hljs-number">1</span>);<br><span class="hljs-built_in">Quicksort</span>(arr, i + <span class="hljs-number">1</span>, high);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="堆排序（Heap-Sort）"><a href="#堆排序（Heap-Sort）" class="headerlink" title="堆排序（Heap Sort）"></a>堆排序（Heap Sort）</h2><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p><ul><li>1.将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；</li><li>2.将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;&#x3D;R[n]；</li><li>3.由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// Heapsort.cpp : 定义控制台应用程序的入口点。</span><br><span class="hljs-comment">//</span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><span class="hljs-comment">//交换元素；</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> temp = arr[a];<br>arr[a] = arr[b];<br>arr[b] = temp;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">adjustHeap</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> length)</span><span class="hljs-comment">//调整大顶堆（仅是调整过程，建立在大顶堆已构建的基础上）</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> temp = arr[i];<span class="hljs-comment">//先取出当前元素i</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>; k&lt;length; k = k * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>)<span class="hljs-comment">//从i结点的左子结点开始，也就是2i+1处开始</span><br>&#123;<br><span class="hljs-keyword">if</span> (k + <span class="hljs-number">1</span>&lt;length&amp;&amp;arr[k]&lt;arr[k + <span class="hljs-number">1</span>])<span class="hljs-comment">//如果左子结点小于右子结点，k指向右子结点</span><br>&#123;<br>k++;<br>&#125;<br><span class="hljs-keyword">if</span> (arr[k] &gt;temp)<span class="hljs-comment">//如果子节点大于父节点，将子节点值赋给父节点（不用进行交换）</span><br>&#123;<br>arr[i] = arr[k];<br>i = k;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>arr[i] = temp;<span class="hljs-comment">//将temp值放到最终的位置</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Heapsort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> length)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//1.构建大顶堆</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = length / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>&#123;<br><span class="hljs-comment">//从第一个非叶子结点从下至上，从右至左调整结构</span><br><span class="hljs-built_in">adjustHeap</span>(arr, i, length);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = length - <span class="hljs-number">1</span>; j&gt;<span class="hljs-number">0</span>; j--)<br>&#123;<br><span class="hljs-built_in">swap</span>(arr, <span class="hljs-number">0</span>, j);<span class="hljs-comment">//将堆顶元素与末尾元素进行交换</span><br><span class="hljs-built_in">adjustHeap</span>(arr, <span class="hljs-number">0</span>, j);<span class="hljs-comment">//重新对堆进行调整</span><br>&#125;<br> <br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">9</span>] = &#123; <span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span> &#125;;<br><span class="hljs-built_in">Heapsort</span>(arr, <span class="hljs-number">9</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">9</span>; i++)<br>cout &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>转博文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>2024</tag>
      
      <tag>排序算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024竞赛笔记合集</title>
    <link href="/2024/01/30/2024%E7%AB%9E%E8%B5%9B%E7%AC%94%E8%AE%B0%E5%90%88%E9%9B%86/"/>
    <url>/2024/01/30/2024%E7%AB%9E%E8%B5%9B%E7%AC%94%E8%AE%B0%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-1-15"><a href="#2024-1-15" class="headerlink" title="2024&#x2F;1&#x2F;15"></a>2024&#x2F;1&#x2F;15</h1><p><img src="https://img.zshfoj.com/804451babccbb261b1a51ab94cc11b2ccc965d54763d3b801184df5fb4af9733.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//Luogu P1706 全排列问题</span><br><span class="hljs-comment">//By OIWIKI 2024/1/15</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">bool</span> vis[<span class="hljs-number">50</span>];  <span class="hljs-comment">// 访问标记数组</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">50</span>];     <span class="hljs-comment">// 排列数组，按顺序储存当前搜索结果</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> step)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (step == n + <span class="hljs-number">1</span>) &#123;  <span class="hljs-comment">// 边界</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>      cout &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">5</span>) &lt;&lt; a[i];  <span class="hljs-comment">// 保留5个场宽</span><br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">if</span> (vis[i] == <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 判断数字i是否在正在进行的全排列中</span><br>      vis[i] = <span class="hljs-number">1</span>;<br>      a[step] = i;<br>      <span class="hljs-built_in">dfs</span>(step + <span class="hljs-number">1</span>);<br>      vis[i] = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 这一步不使用该数 置0后允许下一步使用</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  cin &gt;&gt; n;<br>  <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img.zshfoj.com/5f947ebe53901a18207e1076499d81ec93af19442b5e66f33c5373c2613acd32.png"></p><p><img src="https://img.zshfoj.com/de442aa477a26576a267379e4ac4c44640ad1a91a71f1154aedd9c07edd90564.png"><br><img src="https://img.zshfoj.com/830b8609a5f2943afb6b3d33eb972b975062ecf72ec02237ac4165bdd4983429.png"><br><img src="https://img.zshfoj.com/8b3c2a5cf5a11cbd7fc0b1b14fc4ad93a6f5153dee114259a7908753b1f99951.png"></p><p><img src="https://img.zshfoj.com/7edef84bf84d7da85295834bd03de7fe3ec6d019c7d17ffeafd3a1bc754faebd.png"></p><h3 id="DFS-Deep-First-Search-深度优先搜索（转）"><a href="#DFS-Deep-First-Search-深度优先搜索（转）" class="headerlink" title="DFS-Deep First Search-深度优先搜索（转）"></a><a href="https://zshfoj.com/blog/217/65a4a9e33df3e13f3e721254">DFS-Deep First Search-深度优先搜索（转）</a></h3><p><img src="https://img.zshfoj.com/bd2b0382ba5529dabc458f1413801f545421f5aeb9d43f335754fcc3ffa21a87.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//n皇后问题</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a[<span class="hljs-number">10001</span>];<span class="hljs-comment">//保存皇后的位置</span><br><span class="hljs-type">int</span> b[<span class="hljs-number">10001</span>],c[<span class="hljs-number">10001</span>],d[<span class="hljs-number">10001</span>];<span class="hljs-comment">//标记同列和对角线</span><br><span class="hljs-type">int</span> sum;<span class="hljs-comment">//方案总数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>sum++;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">8</span>;i++)<br>&#123;<br>cout&lt;&lt;a[i];<br><span class="hljs-keyword">if</span>(i!=<span class="hljs-number">8</span>) cout&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-keyword">else</span> cout&lt;&lt;endl;<br>&#125;<br>&#125; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">8</span>;j++)<span class="hljs-comment">//试探八个位置</span><br>&#123;<br><span class="hljs-keyword">if</span>(!b[j] &amp;&amp; !c[i+j] &amp;&amp; !d[i-j+<span class="hljs-number">7</span>])<span class="hljs-comment">//下标不为负，+7</span><br>&#123;<br>a[i]=j;<br>b[j]=<span class="hljs-number">1</span>;<span class="hljs-comment">//j列被占用</span><br>c[i+j]=<span class="hljs-number">1</span>;<span class="hljs-comment">//对角线被占用</span><br>d[i-j+<span class="hljs-number">7</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">8</span>) <span class="hljs-built_in">print</span>();<span class="hljs-comment">//放完</span><br><span class="hljs-keyword">else</span> <span class="hljs-built_in">s</span>(i+<span class="hljs-number">1</span>);<br>b[j]=<span class="hljs-number">0</span>;<span class="hljs-comment">//回溯</span><br>c[i+j]=<span class="hljs-number">0</span>;<br>d[i-j+<span class="hljs-number">7</span>]=<span class="hljs-number">0</span>; <br> &#125; <br> &#125; <br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">s</span>(<span class="hljs-number">1</span>);<br>cout&lt;&lt;sum&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s11.ax1x.com/2024/01/16/pFFKw0e.jpg" alt="pFFKw0e.jpg"></p><p><img src="https://img.zshfoj.com/fb82a8b54e5676290cc855a714217014ba91a3a344f95f9f663195ca205e7474.png"></p><p><img src="/file/217/HYFwp7Ri07zXf75yv9YB2.png" alt="image"></p><p><img src="https://img.zshfoj.com/46c49fa4997899d68f514fc235215f484c672d01ead812da4bb9e435e7dcdd60.png"></p><p><img src="/file/217/LkypoVi1sPWaClKSEIs4M.png" alt="image"></p><p><img src="https://img.zshfoj.com/cca51bb5d0d96405ae4b3edb66453f1fda0d5aef703f0dc8e99eace0907d6dc8.png"></p><h1 id="2024-1-17"><a href="#2024-1-17" class="headerlink" title="2024&#x2F;1&#x2F;17"></a>2024&#x2F;1&#x2F;17</h1><h3 id="广度优先搜索-BFS-学习笔记-XiaoQuQu"><a href="#广度优先搜索-BFS-学习笔记-XiaoQuQu" class="headerlink" title="广度优先搜索 BFS 学习笔记 - XiaoQuQu"></a><a href="https://www.cnblogs.com/XiaoQuQu/p/16184338.html">广度优先搜索 BFS 学习笔记 - XiaoQuQu</a></h3><h3 id="深度优先搜索-DFS-学习笔记-XiaoQuQu"><a href="#深度优先搜索-DFS-学习笔记-XiaoQuQu" class="headerlink" title="深度优先搜索 DFS 学习笔记 - XiaoQuQu"></a><a href="https://www.cnblogs.com/XiaoQuQu/p/16184310.html">深度优先搜索 DFS 学习笔记 - XiaoQuQu</a></h3><p><img src="https://img.zshfoj.com/09f00d054290eb72e539fabd98ce32850bb96c9485c8e50e9361a0147f9f467c.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//P2392 kkksc03考前临时抱佛脚</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a[<span class="hljs-number">5000</span>][<span class="hljs-number">10000</span>];<br><span class="hljs-type">int</span> sum,ans,lft,rght;<br><span class="hljs-type">int</span> s[<span class="hljs-number">5000</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> dep)</span><span class="hljs-comment">//x表示第几个科目,dep表示第几题</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(dep&gt;s[x])<br>&#123;<br>sum=<span class="hljs-built_in">min</span>(sum,<span class="hljs-built_in">max</span>(lft,rght));<br><span class="hljs-keyword">return</span>;<br>&#125;<br>lft+=a[x][dep];<span class="hljs-comment">//左脑尝试</span><br><span class="hljs-built_in">dfs</span>(x,dep+<span class="hljs-number">1</span>);<br>lft-=a[x][dep];<span class="hljs-comment">//回溯</span><br>rght+=a[x][dep];<span class="hljs-comment">//右脑</span><br><span class="hljs-built_in">dfs</span>(x,dep+<span class="hljs-number">1</span>);<br>rght-=a[x][dep];<span class="hljs-comment">//回溯 </span><br> &#125; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">4</span>;i++)<br>cin&gt;&gt;s[i];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">4</span>;i++)<span class="hljs-comment">//科目</span><br>&#123;<br>sum=INT_MAX;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=s[i];j++)<span class="hljs-comment">//题目</span><br>cin&gt;&gt;a[i][j];<span class="hljs-comment">//每题耗时</span><br><span class="hljs-built_in">dfs</span>(i,<span class="hljs-number">1</span>);<br>ans+=sum;<span class="hljs-comment">//sum有该科目完成的最小耗时，统计进ans</span><br> <br> &#125; <br> cout&lt;&lt;ans&lt;&lt;endl;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//P1025 [NOIP2001 提高组] 数的划分--递归做法 </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> l,k;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">se</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> min)</span></span>&#123;<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> n&gt;=k;<br><span class="hljs-keyword">else</span> <br>&#123;<br><span class="hljs-type">int</span> s=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=min;i&lt;=n/k;i++)<br>&#123;<br>s+=<span class="hljs-built_in">se</span>(n-i,k<span class="hljs-number">-1</span>,i);<br>&#125;<br><span class="hljs-keyword">return</span> s;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;l&gt;&gt;k;<br>cout&lt;&lt;<span class="hljs-built_in">se</span>(l,k,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//P2404自然数的拆分问题</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a[<span class="hljs-number">10001</span>]=&#123;<span class="hljs-number">1</span>&#125;,n,total;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=t;i++)<span class="hljs-comment">//拆分方案 </span><br>&#123;<br><span class="hljs-keyword">if</span>(i!=t) cout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot;+&quot;</span>;<br><span class="hljs-keyword">else</span> cout&lt;&lt;a[i]&lt;&lt;endl;<br>&#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">se</span><span class="hljs-params">(<span class="hljs-type">int</span> s,<span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a[t<span class="hljs-number">-1</span>];i&lt;=s;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(i&lt;n)&#123;<span class="hljs-comment">//i要大于等于前一位数,且不超过n</span><br>a[t]=i;<span class="hljs-comment">//保存结果</span><br>s-=i;<span class="hljs-comment">//继续拆分</span><br><span class="hljs-keyword">if</span>(s==<span class="hljs-number">0</span>) <span class="hljs-built_in">print</span>(t) ;<span class="hljs-comment">//拆分结束，输出</span><br><span class="hljs-keyword">else</span> <span class="hljs-built_in">se</span>(s,t+<span class="hljs-number">1</span>);<span class="hljs-comment">//继续搜索</span><br>s+=i;<span class="hljs-comment">//回溯：加上拆分的数 </span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-built_in">se</span>(n,<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2024-1-18"><a href="#2024-1-18" class="headerlink" title="2024&#x2F;1&#x2F;18"></a>2024&#x2F;1&#x2F;18</h1><p><img src="https://img.zshfoj.com/9c8803dba42d06f66016c528a0b436be10ee876d904a411d96acb646cb30a65f.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//P1596 [USACO10OCT] Lake Counting S</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> dx[<span class="hljs-number">8</span>]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">8</span>]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;;<span class="hljs-comment">//各个方向</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">1001</span>][<span class="hljs-number">1001</span>];<span class="hljs-comment">//保存地图</span><br><span class="hljs-type">int</span> n,m,ans;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">7</span>;i++)<span class="hljs-comment">//向8个方向枚举</span><br>&#123;<br><span class="hljs-type">int</span> xx=x+dx[i];<br><span class="hljs-type">int</span> yy=y+dy[i];<br><span class="hljs-keyword">if</span>(a[xx][yy]==<span class="hljs-number">1</span>)<span class="hljs-comment">//只要找到联通得水坑就标记为0 </span><br>&#123;<br>a[xx][yy]=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">dfs</span>(xx,yy);<br>&#125;<br>&#125; <br><span class="hljs-keyword">return</span>;<br>&#125; <br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br><span class="hljs-type">char</span> c;<br>cin&gt;&gt;c;<br><span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;.&#x27;</span>) a[i][j]=<span class="hljs-number">0</span>;<span class="hljs-comment">//1为水坑，0为旱地 </span><br><span class="hljs-keyword">else</span> a[i][j]=<span class="hljs-number">1</span>; <span class="hljs-comment">//判断出界</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<span class="hljs-comment">//枚举每一个点</span><br><span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">1</span>)&#123;<br>ans++;<br><span class="hljs-built_in">dfs</span>(i,j);<br>&#125; <br>&#125;<br>&#125; <br>cout&lt;&lt;ans&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//P1025 [NOIP2001 提高组] 数的划分 </span><br><span class="hljs-comment">//DFS做法</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,k,sum;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> s,<span class="hljs-type">int</span> t,<span class="hljs-type">int</span> l)</span><span class="hljs-comment">//last表示前一个状态 </span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(s&gt;k)<br>&#123;<br><span class="hljs-keyword">if</span>(t==n) sum++;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=n-t;i++)<span class="hljs-comment">//剪枝优化，因为当前格子可选数最大只有n-t </span><br>&#123;<br><span class="hljs-built_in">dfs</span>(s+<span class="hljs-number">1</span>,t+i,i);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;k;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>cout&lt;&lt;sum;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//P2036 [COCI 2008/2009 #2] PERKET</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,a[<span class="hljs-number">1001</span>],b[<span class="hljs-number">1001</span>],ans=<span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//ans初始化，此处约等于INT_MAX</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span> <span class="hljs-comment">//i是第几种配料，x,y代表酸,苦度</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(i&gt;n)&#123;<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span> &amp;&amp; y==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>ans=<span class="hljs-built_in">min</span>(<span class="hljs-built_in">abs</span>(x-y),ans);<span class="hljs-comment">//取绝对值与当前答案进行比较 </span><br><span class="hljs-keyword">return</span>;<br>&#125; <br><span class="hljs-built_in">dfs</span>(i+<span class="hljs-number">1</span>,x*a[i],y+b[i]);<span class="hljs-comment">//添加第i种配料 ,总的酸度为每一种配料的酸度总乘积</span><br><span class="hljs-built_in">dfs</span>(i+<span class="hljs-number">1</span>,x,y); <span class="hljs-comment">//不添加第i中配料</span><br>&#125; <br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>cin&gt;&gt;a[i]&gt;&gt;b[i];<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">//配料编号，酸度(乘法默认初值为1)，苦度（默认初值为0）</span><br>cout&lt;&lt;ans&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img.zshfoj.com/dc2f95243127126c80bd1c7457134c04ba692f6331b90f5a25b3f2993ac54157.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//P1784 数独</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> g[<span class="hljs-number">9</span>][<span class="hljs-number">9</span>];<br><span class="hljs-type">int</span> cell[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>][<span class="hljs-number">10</span>],row[<span class="hljs-number">9</span>][<span class="hljs-number">10</span>],col[<span class="hljs-number">9</span>][<span class="hljs-number">10</span>];<span class="hljs-comment">//保存数独信息</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(y==<span class="hljs-number">9</span>) x++,y=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">9</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span>(g[x][y]) <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(x,y+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)<span class="hljs-comment">//开始判断行、列、宫</span><br>&#123;<br><span class="hljs-keyword">if</span>(cell[x/<span class="hljs-number">3</span>][y/<span class="hljs-number">3</span>][i] || row[x][i] || col[y][i]) <span class="hljs-keyword">continue</span>;<br>g[x][y]=i;<span class="hljs-comment">//保存</span><br>cell[x/<span class="hljs-number">3</span>][y/<span class="hljs-number">3</span>][i]=row[x][i]=col[y][i]=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">dfs</span>(x,y+<span class="hljs-number">1</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>g[x][y]=<span class="hljs-number">0</span>;<span class="hljs-comment">//回溯</span><br>cell[x/<span class="hljs-number">3</span>][y/<span class="hljs-number">3</span>][i]=row[x][i]=col[y][i]=<span class="hljs-literal">false</span>;<br>&#125; <br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">while(false)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">cout&lt;&lt;&quot;renjiheinu&quot;&lt;&lt;endl;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br>&#125; <br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9</span>;i++)<span class="hljs-comment">//输入数独 </span><br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">9</span>;j++)<br>&#123;<br>cin&gt;&gt;g[i][j];<br><span class="hljs-keyword">if</span>(g[i][j])<span class="hljs-comment">//如果已经有数</span><br>&#123;<br><span class="hljs-type">int</span> x=g[i][j];<br>cell[i/<span class="hljs-number">3</span>][j/<span class="hljs-number">3</span>][x]=row[i][x]=col[j][x]=<span class="hljs-literal">true</span>;<br>&#125; <br>&#125;<br>&#125;<br><span class="hljs-comment">//初始化 </span><br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9</span>;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">9</span>;j++) cout&lt;&lt;g[i][j]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>cout&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="P1238-走迷宫"><a href="#P1238-走迷宫" class="headerlink" title="P1238 走迷宫"></a>P1238 走迷宫</h4><p><img src="https://img.zshfoj.com/d7058b8d45aac12b069ace26171de48653773f296497ea8d5f9e414da5a7b3c7.png"></p><h4 id="P1605-迷宫"><a href="#P1605-迷宫" class="headerlink" title="P1605 迷宫"></a>P1605 迷宫</h4><p><img src="https://img.zshfoj.com/093cc1d4e1f3c037aa34ae3233e569c00126a55d9149b40d458e6c2253a5a3d3.png"></p><h3 id="【初一算法基础】深搜与回溯"><a href="#【初一算法基础】深搜与回溯" class="headerlink" title="【初一算法基础】深搜与回溯"></a><a href="https://www.luogu.com.cn/training/449286#problems">【初一算法基础】深搜与回溯</a></h3><h3 id="BFS（图论）-OI-Wiki"><a href="#BFS（图论）-OI-Wiki" class="headerlink" title="BFS（图论）-OI Wiki"></a><a href="https://oi-wiki.org/graph/bfs/">BFS（图论）-OI Wiki</a></h3><h1 id="2024-1-19"><a href="#2024-1-19" class="headerlink" title="2024&#x2F;1&#x2F;19"></a>2024&#x2F;1&#x2F;19</h1><p><img src="https://img.zshfoj.com/c617d1f233a088963afd49fa617587e64e623d94df6d522ed0b87c665024dd75.png"></p><p><img src="https://img.zshfoj.com/06dc68f9436eefb917a396b364594d5ce62828add4f362c6d99dfcea86664a9e.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//T172312 走迷宫</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br><span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> y;<br><span class="hljs-type">int</span> s;<span class="hljs-comment">//步数 </span><br>&#125; que[<span class="hljs-number">10001</span>];<br><span class="hljs-type">int</span> head,tail,r,s,p,q;<br><span class="hljs-type">char</span> c[<span class="hljs-number">1001</span>][<span class="hljs-number">1001</span>];<span class="hljs-comment">//保存地图</span><br><span class="hljs-type">bool</span> flag;<span class="hljs-comment">//标记是否达到目标点，0未到，1已到</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,b[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>&#125;;<span class="hljs-comment">//可走的组合</span><br><span class="hljs-type">bool</span> f[<span class="hljs-number">1001</span>][<span class="hljs-number">1001</span>];<span class="hljs-comment">//记录已走的点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span>(head&lt;tail)<span class="hljs-comment">//队列不为空时操作</span><br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">3</span>;i++)<span class="hljs-comment">//枚举四个方向</span><br>&#123;<br><span class="hljs-type">int</span> xx=que[head].x+a[i];<br><span class="hljs-type">int</span> yy=que[head].y+b[i];<br><span class="hljs-keyword">if</span>(xx&gt;=<span class="hljs-number">1</span>&amp;&amp;xx&lt;=r&amp;&amp;yy&gt;=<span class="hljs-number">1</span>&amp;&amp;yy&lt;=s&amp;&amp;c[xx][yy]==<span class="hljs-string">&#x27;.&#x27;</span>&amp;&amp;!f[xx][yy])<span class="hljs-comment">//判断x,y下一步是否可走且是否走过</span><br>&#123;<br>f[xx][yy]=<span class="hljs-number">1</span>;<span class="hljs-comment">//标记已走</span><br>que[tail].x=xx;<br>que[tail].y=yy; <span class="hljs-comment">//更新xx和yy的值</span><br>que[tail].s=que[head].s+<span class="hljs-number">1</span>;<span class="hljs-comment">//步数是父亲的步数+1</span><br>tail++; <br>&#125;<br><span class="hljs-keyword">if</span>(xx==p&amp;&amp;yy==q)<span class="hljs-comment">//如果找到目标点</span><br>&#123;<br>flag=<span class="hljs-number">1</span>;<span class="hljs-comment">//标记已完成</span><br><span class="hljs-keyword">break</span>;<span class="hljs-comment">//退出</span><br>&#125; <br>&#125; <br><span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>head++;<span class="hljs-comment">//head++才能对后面的点进行二次扩展 </span><br>&#125; <br>&#125; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;r&gt;&gt;s;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=r;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=s;j++)<br>&#123;<br>cin&gt;&gt;c[i][j];<br>&#125;<br>&#125;<br>p=r;q=s;<span class="hljs-comment">//终点坐标</span><br>head=<span class="hljs-number">1</span>;tail=<span class="hljs-number">2</span>;<br>que[tail].x=<span class="hljs-number">1</span>; que[tail].y=<span class="hljs-number">1</span>; que[tail].s=<span class="hljs-number">0</span>+<span class="hljs-number">1</span>;<br>tail++;<br>f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>flag=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//初始化</span><br><span class="hljs-built_in">bfs</span>();<br>cout&lt;&lt;que[tail<span class="hljs-number">-1</span>].s&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//禁止直接抄袭！打击这种行为！</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//B3625 迷宫寻路</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br><span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> y;<br><span class="hljs-type">int</span> s;<span class="hljs-comment">//步数 </span><br>&#125; que[<span class="hljs-number">10001</span>];<br><span class="hljs-type">int</span> head,tail,r,s,p,q;<br><span class="hljs-type">char</span> c[<span class="hljs-number">1001</span>][<span class="hljs-number">1001</span>];<span class="hljs-comment">//保存地图</span><br><span class="hljs-type">bool</span> flag;<span class="hljs-comment">//标记是否达到目标点，0未到，1已到</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,b[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>&#125;;<span class="hljs-comment">//可走的组合</span><br><span class="hljs-type">bool</span> f[<span class="hljs-number">1001</span>][<span class="hljs-number">1001</span>];<span class="hljs-comment">//记录已走的点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span>(head&lt;tail)<span class="hljs-comment">//队列不为空时操作</span><br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">3</span>;i++)<span class="hljs-comment">//枚举四个方向</span><br>&#123;<br><span class="hljs-type">int</span> xx=que[head].x+a[i];<br><span class="hljs-type">int</span> yy=que[head].y+b[i];<br><span class="hljs-keyword">if</span>(xx&gt;=<span class="hljs-number">1</span>&amp;&amp;xx&lt;=r&amp;&amp;yy&gt;=<span class="hljs-number">1</span>&amp;&amp;yy&lt;=s&amp;&amp;c[xx][yy]==<span class="hljs-string">&#x27;.&#x27;</span>&amp;&amp;!f[xx][yy])<span class="hljs-comment">//判断x,y下一步是否可走且是否走过</span><br>&#123;<br>f[xx][yy]=<span class="hljs-number">1</span>;<span class="hljs-comment">//标记已走</span><br>que[tail].x=xx;<br>que[tail].y=yy; <span class="hljs-comment">//更新xx和yy的值</span><br>que[tail].s=que[head].s+<span class="hljs-number">1</span>;<span class="hljs-comment">//步数是父亲的步数+1</span><br>tail++; <br>&#125;<br><span class="hljs-keyword">if</span>(xx==p&amp;&amp;yy==q)<span class="hljs-comment">//如果找到目标点</span><br>&#123;<br>flag=<span class="hljs-number">1</span>;<span class="hljs-comment">//标记已完成</span><br><span class="hljs-keyword">break</span>;<span class="hljs-comment">//退出</span><br>&#125; <br>&#125; <br><span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>head++;<span class="hljs-comment">//head++才能对后面的点进行二次扩展 </span><br>&#125; <br>&#125; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;r&gt;&gt;s;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=r;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=s;j++)<br>&#123;<br>cin&gt;&gt;c[i][j];<br>&#125;<br>&#125;<br>p=r;q=s;<span class="hljs-comment">//终点坐标</span><br>head=<span class="hljs-number">1</span>;tail=<span class="hljs-number">2</span>;<br>que[tail].x=<span class="hljs-number">1</span>; que[tail].y=<span class="hljs-number">1</span>; que[tail].s=<span class="hljs-number">0</span>+<span class="hljs-number">1</span>;<br>tail++;<br>f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>flag=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//初始化</span><br><span class="hljs-built_in">bfs</span>();<br><span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>) cout&lt;&lt;<span class="hljs-string">&quot;Yes&quot;</span>;<br><span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;No&quot;</span>; <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//禁止直接抄袭！打击这种行为！</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//P1451 求细胞数量</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,dx[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;,dy[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,a[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<span class="hljs-comment">//保存地图，枚举方向 </span><br><span class="hljs-type">int</span> sum,q[<span class="hljs-number">10000</span>][<span class="hljs-number">4</span>],h,t;<span class="hljs-comment">//模拟BFS的数组 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>h=<span class="hljs-number">1</span>,t=<span class="hljs-number">1</span>;<br>q[h][<span class="hljs-number">1</span>]=x;<br>q[h][<span class="hljs-number">2</span>]=y;<span class="hljs-comment">//初始化 </span><br><span class="hljs-keyword">while</span>(h&lt;=t)<span class="hljs-comment">//队列不为空 </span><br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<span class="hljs-comment">//枚举方向 </span><br>&#123;<br><span class="hljs-type">int</span> xx=q[h][<span class="hljs-number">1</span>]+dx[i];<br><span class="hljs-type">int</span> yy=q[h][<span class="hljs-number">2</span>]+dy[i];<br><span class="hljs-keyword">if</span>(a[xx][yy]!=<span class="hljs-number">0</span>&amp;&amp;xx&gt;=<span class="hljs-number">1</span>&amp;&amp;xx&lt;=n&amp;&amp;yy&gt;=<span class="hljs-number">1</span>&amp;&amp;yy&lt;=m)<span class="hljs-comment">//如果满足移动条件 </span><br>&#123;<br>t++;<span class="hljs-comment">//尾部++ </span><br>q[t][<span class="hljs-number">1</span>]=xx;<br>q[t][<span class="hljs-number">2</span>]=yy;<br>a[xx][yy]=<span class="hljs-number">0</span>;<span class="hljs-comment">//地图中标记为0 </span><br>&#125;<br>&#125;<br>h++;<span class="hljs-comment">//继续循环，head++ </span><br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%1d&quot;</span>,&amp;a[i][j]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(a[i][j]!=<span class="hljs-number">0</span>)<span class="hljs-comment">//是其他数字时 </span><br>&#123;<br><span class="hljs-built_in">fun</span>(i,j);<br>sum++;<br>&#125;<br>&#125;<br>&#125;<br>cout&lt;&lt;sum;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//禁止直接抄袭！打击这种行为！</span><br><br></code></pre></td></tr></table></figure><p><img src="https://img.zshfoj.com/afb383b5b8fa2d6c90ee69bb29614ffa0c949920e4a7e1f0bafc92ae32c65fc8.png"><br><img src="https://img.zshfoj.com/230eba837132e779f9d7ed273a7cdca26b14d3cbb19de76eb7c512470bee6550.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//B3626 跳跃机器人</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br>queue&lt;<span class="hljs-type">int</span>&gt; q;<br><span class="hljs-type">int</span> s[<span class="hljs-number">1000010</span>];<span class="hljs-comment">//记录步数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">memset</span>(s,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(s));<span class="hljs-comment">//初始化数组</span><br>q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//bot原位</span><br>s[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<span class="hljs-comment">//七点不需要步数</span><br><span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<span class="hljs-comment">//队列不为空</span><br><span class="hljs-type">int</span> t=q.<span class="hljs-built_in">front</span>();<br>q.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//提前出队第一元素</span><br><span class="hljs-keyword">if</span>(t==n)&#123;<span class="hljs-comment">//到达n</span><br>cout&lt;&lt;s[n];<br><span class="hljs-keyword">return</span>; <br>&#125; <br><span class="hljs-keyword">if</span>(t<span class="hljs-number">-1</span>&gt;=<span class="hljs-number">1</span>&amp;&amp;t<span class="hljs-number">-1</span>&lt;=n&amp;&amp;s[t<span class="hljs-number">-1</span>]==<span class="hljs-number">-1</span>)&#123;<span class="hljs-comment">//x-1</span><br>q.<span class="hljs-built_in">push</span>(t<span class="hljs-number">-1</span>);<br>s[t<span class="hljs-number">-1</span>]=s[t]+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(t+<span class="hljs-number">1</span>&gt;=<span class="hljs-number">1</span>&amp;&amp;t+<span class="hljs-number">1</span>&lt;=n&amp;&amp;s[t+<span class="hljs-number">1</span>]==<span class="hljs-number">-1</span>)&#123;<span class="hljs-comment">//x+1</span><br>q.<span class="hljs-built_in">push</span>(t+<span class="hljs-number">1</span>);<br>s[t+<span class="hljs-number">1</span>]=s[t]+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*t&gt;=<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-number">2</span>*t&lt;=n&amp;&amp;s[t*<span class="hljs-number">2</span>]==<span class="hljs-number">-1</span>)&#123;<span class="hljs-comment">//2x</span><br>q.<span class="hljs-built_in">push</span>(t*<span class="hljs-number">2</span>);<br>s[t*<span class="hljs-number">2</span>]=s[t]+<span class="hljs-number">1</span>;<br>&#125;<br>&#125; <br><span class="hljs-keyword">return</span>;<br>&#125; <br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-built_in">bfs</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【初一算法基础】宽搜"><a href="#【初一算法基础】宽搜" class="headerlink" title="【初一算法基础】宽搜"></a><a href="https://www.luogu.com.cn/training/449732#problems">【初一算法基础】宽搜</a></h3><h1 id="2024-1-22"><a href="#2024-1-22" class="headerlink" title="2024&#x2F;1&#x2F;22"></a>2024&#x2F;1&#x2F;22</h1><h3 id="拯救oibh总部"><a href="#拯救oibh总部" class="headerlink" title="拯救oibh总部"></a>拯救oibh总部</h3><p><img src="https://img.zshfoj.com/7f76619eb7120580dc6e9b01652cf37df69bf6c1b992db305839dc3814b687ff.png"></p><h3 id="奇怪的电梯"><a href="#奇怪的电梯" class="headerlink" title="奇怪的电梯"></a>奇怪的电梯</h3><p><strong>DFS</strong><br><img src="https://img.zshfoj.com/eb60efbdb92395effabba94cca37466884fdf15e0d8b9646446b81353206e2eb.png"><br><strong>BFS</strong><br><img src="https://img.zshfoj.com/9ca5d5527bbe1647f200343a0a10d5a506a41bb6d6497a7a9c03cc4ac5cf4b09.png"></p><h3 id="马的遍历"><a href="#马的遍历" class="headerlink" title="马的遍历"></a>马的遍历</h3><p><img src="https://img.zshfoj.com/23ca4057d8809ec48755a7892bf53628a64e96073dd7d783c9617b4d3076f183.png"></p><p><img src="https://img.zshfoj.com/e9b285b26bebc51a5664acf41c8b1085a37cff8153d3c7433815886baebf09a0.png"></p><h3 id="P2895"><a href="#P2895" class="headerlink" title="P2895"></a>P2895</h3><p><img src="https://img.zshfoj.com/f447cf15578570f8a476eebec40a8613fa18ea8d6e4cefa3bdb3f81d0a935bd4.png"></p><p><img src="https://img.zshfoj.com/ebb19c397fadea87563af388c2ffe70b200bb04e4c8592eb49236faca819aa83.png"></p><h3 id="未写完暂存-写完自动销毁"><a href="#未写完暂存-写完自动销毁" class="headerlink" title="未写完暂存(写完自动销毁)"></a><a href="https://www.luogu.com.cn/paste/16xrotm9">未写完暂存(写完自动销毁)</a></h3><h1 id="2024-1-23"><a href="#2024-1-23" class="headerlink" title="2024&#x2F;1&#x2F;23"></a>2024&#x2F;1&#x2F;23</h1><h3 id="【初一算法基础】高精度"><a href="#【初一算法基础】高精度" class="headerlink" title="【初一算法基础】高精度"></a><a href="https://www.luogu.com.cn/training/453058#problems">【初一算法基础】高精度</a></h3><p><img src="https://img.zshfoj.com/98284b9ecaedd9de9a5eb5e0da9a0a7d8a54944ecd2a74a207735d1a15ae0f89.png"></p><p><img src="https://img.zshfoj.com/8633e78c9253397ea9eb4da37bc37f3bc16aae0f88f5bb7d116c021e879653eaa.png"><br>a<br><img src="https://img.zshfoj.com/05052e3cbaa1aadc5674a4b38a4638104153043fd5bdc886c3f48c2b18de6454.png"></p><p><img src="https://img.zshfoj.com/3392db2786afc787c2fe4a68aa60db1e23a4fb5f57c50e62013fe4e9118e34e4.png"></p><h3 id="P2437-蜜蜂路线"><a href="#P2437-蜜蜂路线" class="headerlink" title="P2437 蜜蜂路线"></a>P2437 蜜蜂路线</h3><p><img src="https://img.zshfoj.com/402ac5ffcb87418805e5ed24267666faa51ef87743ae86151c826b4930ad0200.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//P2437</span><br><span class="hljs-comment">//看了一下题解才知道可以用递归c </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> f[<span class="hljs-number">10005</span>][<span class="hljs-number">20010</span>];<span class="hljs-comment">//处理每个方格 </span><br><span class="hljs-type">int</span> m,n;<br><span class="hljs-type">int</span> len=<span class="hljs-number">1</span>;<span class="hljs-comment">//计数器计算总和位数 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">did</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span>&#123;<span class="hljs-comment">//k指阶数</span><br><span class="hljs-type">int</span> isBigten=<span class="hljs-number">0</span>;<span class="hljs-comment">//处理进位 </span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=len;i++) <span class="hljs-comment">//开始高精度加法</span><br>&#123;<br>f[k][i]=f[k<span class="hljs-number">-1</span>][i]+f[k<span class="hljs-number">-2</span>][i]+isBigten;<span class="hljs-comment">//递推(只是多了一个加进位) </span><br>isBigten=f[k][i]/<span class="hljs-number">10</span>;<span class="hljs-comment">//获取进位值</span><br>f[k][i]%=<span class="hljs-number">10</span>;<span class="hljs-comment">//得到进位后获取当前位的值</span><br>&#125;<br><span class="hljs-keyword">if</span>(isBigten&gt;<span class="hljs-number">0</span>) <span class="hljs-comment">//最后一位可能会进位</span><br>&#123;<br>len++;<span class="hljs-comment">//位数+1 </span><br>f[k][len]+=isBigten;<span class="hljs-comment">//进位加入总和 </span><br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>cin&gt;&gt;m&gt;&gt;n;<br>f[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>f[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<span class="hljs-comment">//递推边界 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n-m+<span class="hljs-number">1</span>;i++)<span class="hljs-comment">//循环n-m+1次（因为i=2） </span><br>&#123;<br><span class="hljs-built_in">did</span>(i);<span class="hljs-comment">//一个个方格（阶数）开始递推 </span><br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=len;i&gt;=<span class="hljs-number">1</span>;i--)<br>&#123;<br>cout&lt;&lt;f[n-m+<span class="hljs-number">1</span>][i];<span class="hljs-comment">//输出结果 </span><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="P1601-A-B高精"><a href="#P1601-A-B高精" class="headerlink" title="P1601 A+B高精"></a>P1601 A+B高精</h3><p><img src="https://img.zshfoj.com/fa5ca212d6b476988bef4f26b1fcf6b1d7e07c0a549bceba2d1ba4f0e777ae55.png"></p><p><img src="https://img.zshfoj.com/0442292a32755add1eef254910763eb5e73afd32f2718caade3b9dce1e7f424e.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//P1601 A+B高精</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a[<span class="hljs-number">600</span>],b[<span class="hljs-number">600</span>],c[<span class="hljs-number">600</span>],k1,k2,k3,maxn;<span class="hljs-comment">//处理位数和存储 </span><br>string a1,b1;<span class="hljs-comment">//存储两个加数</span><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;a1&gt;&gt;b1;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a1.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<span class="hljs-comment">//字符串a1转到数组a存储 </span><br>&#123;<br>a[++k1]=a1[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-comment">//把高位放在数组的最后 </span><br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=b1.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<span class="hljs-comment">//字符串b1转到数组b存储 </span><br>&#123;<br>b[++k2]=b1[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-comment">//把高位放在数组的最后 </span><br>&#125;<br>maxn=<span class="hljs-built_in">max</span>(k1,k2);<span class="hljs-comment">//最大数的数位 </span><br>k3=maxn+<span class="hljs-number">1</span>;<span class="hljs-comment">//初始化结果的数位 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=maxn;i++)<br>&#123;<br>c[i]=a[i]+b[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=maxn+<span class="hljs-number">1</span>;i++)<span class="hljs-comment">//处理加法进位 </span><br>&#123;<br><span class="hljs-keyword">if</span>(c[i]&gt;=<span class="hljs-number">10</span>)<span class="hljs-comment">//如果有进位 </span><br>&#123;<br>c[i+<span class="hljs-number">1</span>]+=c[i]/<span class="hljs-number">10</span>;<span class="hljs-comment">//加上进位值 </span><br>c[i]%=<span class="hljs-number">10</span>;<span class="hljs-comment">//得到进位后当前位的值 </span><br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span>(c[k3]==<span class="hljs-number">0</span>)<br>k3--;<span class="hljs-comment">//慢慢消掉结果的位数 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-built_in">max</span>(k3,<span class="hljs-number">1</span>);i&gt;=<span class="hljs-number">1</span>;i--)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,c[i]);<span class="hljs-comment">//输出 </span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="P2142-高精度减法"><a href="#P2142-高精度减法" class="headerlink" title="P2142 高精度减法"></a>P2142 高精度减法</h3><p><img src="https://img.zshfoj.com/374ad60048b1bba433bd11e3b4a5b91e0fed648825091b30e034ce23d5cc3fb6.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//P2142 高精度减法</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a[<span class="hljs-number">100000</span>]=&#123;<span class="hljs-number">0</span>&#125;,b[<span class="hljs-number">100000</span>]=&#123;<span class="hljs-number">0</span>&#125;,c[<span class="hljs-number">100000</span>]=&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//初始化数组 </span><br><span class="hljs-type">int</span> i,j,k,l,m,n,flag;<br>string a1,b1,c1;<span class="hljs-comment">//存储被减数，减数和差 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">did</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;=a[<span class="hljs-number">0</span>])&#123;<br>        i++;<br>        <span class="hljs-keyword">if</span>(a[i]&lt;b[i])&#123;<span class="hljs-comment">//被减数比减数小 </span><br>            a[i+<span class="hljs-number">1</span>]--;<span class="hljs-comment">//前一位-- </span><br>a[i]+=<span class="hljs-number">10</span>;<span class="hljs-comment">//当前数位++ </span><br>        &#125;<br>        c[i]=a[i]-b[i];<span class="hljs-comment">//相应数值相减 </span><br>        c[<span class="hljs-number">0</span>]++;<span class="hljs-comment">//位数++</span><br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;a1&gt;&gt;b1;<br>    a[<span class="hljs-number">0</span>]=a1.<span class="hljs-built_in">length</span>();<span class="hljs-comment">//取长度 </span><br>    b[<span class="hljs-number">0</span>]=b1.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]&lt;b[<span class="hljs-number">0</span>] || (a[<span class="hljs-number">0</span>]==b[<span class="hljs-number">0</span>] &amp;&amp; a1&lt;b1))&#123;<span class="hljs-comment">//比较大小，如果被减数小于减数就交换 </span><br>        c1=b1;b1=a1;a1=c1;<br>        <span class="hljs-built_in">swap</span>(a[<span class="hljs-number">0</span>],b[<span class="hljs-number">0</span>]);<span class="hljs-comment">//交换两数的位数 </span><br>        cout&lt;&lt;<span class="hljs-string">&quot;-&quot;</span>;<span class="hljs-comment">//因为交换了，输出“-”</span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=a[<span class="hljs-number">0</span>];i++) &#123;<span class="hljs-comment">//字符串a1转到数组a存储</span><br>    a[i]=a1[a[<span class="hljs-number">0</span>]-i]-<span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-comment">//最高位放到末尾 </span><br>&#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=b[<span class="hljs-number">0</span>];i++)&#123;<span class="hljs-comment">//字符串b1转到数组b存储</span><br>    b[i]=b1[b[<span class="hljs-number">0</span>]-i]-<span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-comment">//最高位放到末尾 </span><br>&#125;<br>    <span class="hljs-built_in">did</span>();<span class="hljs-comment">//减法运算 </span><br>    <span class="hljs-keyword">while</span>(c[c[<span class="hljs-number">0</span>]]==<span class="hljs-number">0</span>&amp;&amp;c[<span class="hljs-number">0</span>]&gt;<span class="hljs-number">1</span>) c[<span class="hljs-number">0</span>]--;<span class="hljs-comment">//判断0是否有用,因为使用 “c[0]&gt;1”减会减多，从而使c[0]=0</span><br>    <span class="hljs-keyword">for</span>(i=c[<span class="hljs-number">0</span>];i&gt;=<span class="hljs-number">1</span>;i--) &#123;<br>    cout&lt;&lt;c[i];<span class="hljs-comment">//倒序输出</span><br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h3><p><img src="https://img.zshfoj.com/113d8ff3da26e35cb345586f7bf46c5e310446840e55b9beda607d29addbfbff.png"></p><p><img src="https://img.zshfoj.com/6e9540f4919251246233f4b952e136ff91c6b86c714aa6041a7e289d7f67bc40.png"></p><p><img src="https://img.zshfoj.com/27c083e006ace0bdb29598f6d1bfac2dd5fa0aa12a62211d21f8851c99456c1b.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//P1303</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">char</span> a1[<span class="hljs-number">2000</span>],b1[<span class="hljs-number">2000</span>];<br><span class="hljs-type">int</span> a[<span class="hljs-number">20005</span>]=&#123;<span class="hljs-number">0</span>&#125;,b[<span class="hljs-number">20005</span>]=&#123;<span class="hljs-number">0</span>&#125;,c[<span class="hljs-number">40010</span>]=&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//保存数子的数组 </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> la,lb,lc=<span class="hljs-number">0</span>;<br>cin&gt;&gt;a1&gt;&gt;b1;<br>la=<span class="hljs-built_in">strlen</span>(a1);<span class="hljs-comment">//取位数 </span><br>lb=<span class="hljs-built_in">strlen</span>(b1);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=la;i++)<span class="hljs-comment">//a1保存到数组a </span><br>&#123;<br>a[la-i]=a1[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-comment">//最高为防末尾 </span><br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;lb;i++)<span class="hljs-comment">//b1保存到数组b</span><br>&#123;<br>b[lb-i]=b1[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-comment">//最高为防末尾 </span><br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=la;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=lb;j++)<br>&#123;<br>c[i+j<span class="hljs-number">-1</span>]=a[i]*b[j]+c[i+j<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">if</span>(c[i+j<span class="hljs-number">-1</span>]&gt;=<span class="hljs-number">10</span>)<span class="hljs-comment">//如果有进位 </span><br>&#123;<br>c[i+j]+=c[i+j<span class="hljs-number">-1</span>]/<span class="hljs-number">10</span>;<span class="hljs-comment">//加上进位的值 </span><br>c[i+j<span class="hljs-number">-1</span>]=c[i+j<span class="hljs-number">-1</span>]%<span class="hljs-number">10</span>;<span class="hljs-comment">//更新当前位的值 </span><br>&#125;<br>&#125;<br>&#125;<br>lc=la+lb;<span class="hljs-comment">//加 </span><br><span class="hljs-keyword">while</span>(c[lc]==<span class="hljs-number">0</span> &amp;&amp; lc&gt;<span class="hljs-number">1</span>)<span class="hljs-comment">//毁灭积的位数 </span><br>&#123;<br>lc--;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=lc;i&gt;=<span class="hljs-number">1</span>;i--)<br>&#123;<br>cout&lt;&lt;c[i];<span class="hljs-comment">//输出 </span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="P1009-阶乘之和"><a href="#P1009-阶乘之和" class="headerlink" title="P1009 阶乘之和"></a>P1009 阶乘之和</h3><p><img src="https://img.zshfoj.com/470e795e9f5fa55912e709e6d64b4f2072f9ad19ef30525f362d206f3d13f361.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,a[<span class="hljs-number">1000</span>],b[<span class="hljs-number">1000</span>],len;<span class="hljs-comment">//保存阶乘过程中的数字数组 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">jiechenghe</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;<span class="hljs-comment">//进位 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">1000</span>; i++)<br>&#123;<br>b[i]=b[i]+a[i]+x;<span class="hljs-comment">//加上所有阶乘并处理进位 </span><br>x=b[i]/<span class="hljs-number">10</span>;<span class="hljs-comment">//取进位 </span><br>b[i]%=<span class="hljs-number">10</span>;<span class="hljs-comment">//得到进位后获取当前位的值</span><br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">jiecheng</span><span class="hljs-params">(<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;<span class="hljs-comment">//进位 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">1000</span>; i++)&#123;<br>a[i]=a[i]*y+x;<span class="hljs-comment">//阶乘 </span><br>x=a[i]/<span class="hljs-number">10</span>;<span class="hljs-comment">//取进位 </span><br>a[i]%=<span class="hljs-number">10</span>;<span class="hljs-comment">//得到进位后获取当前位的值</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n;<br>a[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-comment">//1!为1 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<span class="hljs-comment">//阶乘解决 </span><br><span class="hljs-built_in">jiecheng</span>(i);<span class="hljs-comment">//每一步都计算并相加 </span><br><span class="hljs-built_in">jiechenghe</span>();<br>&#125;<br>len=<span class="hljs-number">1000</span>;<span class="hljs-comment">//一个定值，为去掉0做准备 </span><br><span class="hljs-keyword">while</span>(b[len]==<span class="hljs-number">0</span>)&#123;<br>len--;<span class="hljs-comment">//去掉多余的0 </span><br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=len;i&gt;=<span class="hljs-number">0</span>;i--)<br>cout&lt;&lt;b[i];<span class="hljs-comment">//逆向输出 </span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img.zshfoj.com/ebe838dc09a7cd0ec444f48c84c815ecdcb4eb3930e0608d7057468e28c513a9.png"></p><h1 id="2024-1-24"><a href="#2024-1-24" class="headerlink" title="2024&#x2F;1&#x2F;24"></a>2024&#x2F;1&#x2F;24</h1><p><img src="https://img.zshfoj.com/202ceb2dbe9af3db167f6e079a4317160c7181050244f2d7e6c6bc76bb4ade42.png"></p><h3 id="C-七大经典排序算法详解（代码实现-解析）转"><a href="#C-七大经典排序算法详解（代码实现-解析）转" class="headerlink" title="C++七大经典排序算法详解（代码实现+解析）转"></a><a href="https://zshfoj.com/blog/217/65b05cc7d14038f289ef7f9c">C++七大经典排序算法详解（代码实现+解析）转</a></h3><h3 id="经典排序算法详解-OI-WIKI"><a href="#经典排序算法详解-OI-WIKI" class="headerlink" title="  经典排序算法详解(OI WIKI)"></a><a href="https://zshfoj.com/blog/217/65b06519d14038f289ef8377">  经典排序算法详解(OI WIKI)</a></h3><p><img src="https://img.zshfoj.com/87e6737c582edd1c7b549f3d19e729f54cb6b8ae307ff24376e231d2257004bc.png"><br><img src="https://img.zshfoj.com/951dc7474f0b18e3bf061e405b57ffde32b70559a98b573d92a6efa6a817df27.png"></p><p><img src="https://img.zshfoj.com/6df08cabd86c1427e9a47070f95b6012ed5abccf6cfcb156e2b41b608ae11ffa.png"></p><h1 id="2024-1-25"><a href="#2024-1-25" class="headerlink" title="2024&#x2F;1&#x2F;25"></a>2024&#x2F;1&#x2F;25</h1><p><img src="https://img.zshfoj.com/4f8ecb3f9640ebe41587749a117444061682395db183a5a06cc0ace137a5141a.png"></p><p><img src="https://img.zshfoj.com/9a2c2928cc2ac9728a2faa158af13414cdc0ebdd0b7f47d84c2c28b54310f7d5.png"></p><p><img src="https://img.zshfoj.com/84f845d9075e02a2cf6633a1540bf8c55106da5b0be43435b2846012521a2812.png"></p><hr><h3 id="P1781-宇宙总统"><a href="#P1781-宇宙总统" class="headerlink" title="P1781 宇宙总统"></a>P1781 宇宙总统</h3><p><img src="https://img.zshfoj.com/cb33cab1293bb47a3c435ac447527fdd44d0b499497610c5d325b85d9427f242.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">char</span> a[<span class="hljs-number">10001</span>],t[<span class="hljs-number">10001</span>];<span class="hljs-comment">//因为数字会比较大 </span><br><span class="hljs-type">char</span> b[<span class="hljs-number">10001</span>];<br><span class="hljs-type">int</span> lenx,leny,n,m=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n;<br>cin&gt;&gt;a;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>    <span class="hljs-built_in">memset</span>(b,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(b));<span class="hljs-comment">//初始化 </span><br>cin&gt;&gt;b;<br>lenx=<span class="hljs-built_in">strlen</span>(a);<span class="hljs-comment">//取数位 </span><br>leny=<span class="hljs-built_in">strlen</span>(b);<br><span class="hljs-keyword">if</span>((lenx&lt;leny)||(lenx==leny&amp;&amp;<span class="hljs-built_in">strcmp</span>(a,b)&lt;<span class="hljs-number">0</span>))&#123;<span class="hljs-comment">//进行交换（排序） </span><br>   <span class="hljs-built_in">strcpy</span>(t,a);<br><span class="hljs-built_in">strcpy</span>(a,b);<br><span class="hljs-built_in">strcpy</span>(b,t);<br>m=i+<span class="hljs-number">1</span>;<span class="hljs-comment">//序号也要一起变化 </span><br>    &#125;<br>&#125;<br>lenx=<span class="hljs-built_in">strlen</span>(a);<br>cout&lt;&lt;m&lt;&lt;endl;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;lenx;i++)&#123;<br>cout&lt;&lt;a[i];<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="P1059-NOIP2006-普及组-明明的随机数"><a href="#P1059-NOIP2006-普及组-明明的随机数" class="headerlink" title="P1059 [NOIP2006 普及组] 明明的随机数"></a>P1059 [NOIP2006 普及组] 明明的随机数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a[<span class="hljs-number">114514</span>];<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n,s,t=<span class="hljs-number">0</span>;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>cin&gt;&gt;s;<br><span class="hljs-keyword">if</span>(a[s]) <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//桶排序</span><br>a[s]++;<br>t++; <br>&#125;<br>cout&lt;&lt;t&lt;&lt;endl;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">1001</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(a[i]) cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="P1068-NOIP2009-普及组-分数线划定"><a href="#P1068-NOIP2009-普及组-分数线划定" class="headerlink" title="P1068 [NOIP2009 普及组] 分数线划定"></a>P1068 [NOIP2009 普及组] 分数线划定</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">player</span>&#123;<br><span class="hljs-type">int</span> id;<br><span class="hljs-type">int</span> score;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n&gt;&gt;m;<br>player a[n];<span class="hljs-comment">//定义a[n]</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i].id&gt;&gt;a[i].score;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<span class="hljs-comment">//选择排序</span><br><span class="hljs-type">int</span> k=i;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;n;j++)&#123;<br><span class="hljs-keyword">if</span>(a[j].score&gt;a[k].score) k=j;<br><span class="hljs-keyword">if</span>((a[j].score==a[k].score)&amp;&amp;(a[j].id&lt;a[k].id)) k=j;<br>&#125; <br>player temp=a[i];<br>a[i]=a[k];<br>a[k]=temp;<br>&#125; <br><span class="hljs-type">int</span> b=m*<span class="hljs-number">1.5</span><span class="hljs-number">-1</span>;<span class="hljs-comment">//排名为m*150%的学生在数组位置下标</span><br><span class="hljs-type">int</span> line=a[b].score;<span class="hljs-comment">//分数线</span><br><span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-keyword">if</span>(a[i].score&gt;=line) count++;<br>&#125; <br>cout&lt;&lt;line&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;count&lt;&lt;endl;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;count;i++) cout&lt;&lt;a[i].id&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;a[i].score&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="P1116-车厢重组"><a href="#P1116-车厢重组" class="headerlink" title="P1116 车厢重组"></a>P1116 车厢重组</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a[<span class="hljs-number">10010</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,sum = <span class="hljs-number">0</span>;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i ++)<br>cin &gt;&gt; a[i];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i ++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = n ; j &gt; <span class="hljs-number">1</span> ; j --)<br><span class="hljs-keyword">if</span>(a[j] &lt; a[j - <span class="hljs-number">1</span>])<span class="hljs-comment">//冒泡排序</span><br>&#123;<br><span class="hljs-built_in">swap</span>(a[j],a[j<span class="hljs-number">-1</span>]);<br>sum ++;<span class="hljs-comment">//交换次数++</span><br>&#125;<br>cout &lt;&lt; sum;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="P1583-魔法照片"><a href="#P1583-魔法照片" class="headerlink" title="P1583 魔法照片"></a>P1583 魔法照片</h3><p><img src="https://img.zshfoj.com/f70cdadb9cd83aa560b9f7de49dc8b17c654941686ad85c6839d9b1fa6d14c14.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> e[<span class="hljs-number">114514</span>],n,k;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">people</span>&#123;<br><span class="hljs-type">int</span> w;<span class="hljs-comment">//权值</span><br><span class="hljs-type">int</span> num;<span class="hljs-comment">//编号</span><br><span class="hljs-type">int</span> d;<span class="hljs-comment">//类别 </span><br>&#125;p[<span class="hljs-number">1919810</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> people &amp;a,<span class="hljs-type">const</span> people &amp;b)</span></span>&#123;<span class="hljs-comment">//自定义结构体排序 </span><br><span class="hljs-keyword">if</span>(a.w!=b.w) <span class="hljs-keyword">return</span> a.w&gt;b.w;<span class="hljs-comment">//从大到小 </span><br><span class="hljs-keyword">return</span> a.num&lt;b.num;<span class="hljs-comment">//序号小的优先 </span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n&gt;&gt;k;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i++) cin&gt;&gt;e[i];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>cin&gt;&gt;p[j].w;<span class="hljs-comment">//权值</span><br>p[j].num=j;<span class="hljs-comment">//编号 </span><br>&#125;<br><span class="hljs-built_in">sort</span>(p+<span class="hljs-number">1</span>,p+<span class="hljs-number">1</span>+n,cmp);<span class="hljs-comment">//第一次排序</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>p[i].d=(i<span class="hljs-number">-1</span>)%<span class="hljs-number">10</span>+<span class="hljs-number">1</span>;<span class="hljs-comment">//分类</span><br>p[i].w+=e[p[i].d];<span class="hljs-comment">//加上e[i]</span><br>&#125; <br><span class="hljs-built_in">sort</span>(p+<span class="hljs-number">1</span>,p+<span class="hljs-number">1</span>+n,cmp);<span class="hljs-comment">//第二次排序</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++) cout&lt;&lt;p[i].num&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><img src="https://img.zshfoj.com/c3240554d8e31295c258aa6e62ac4e707c3edcb6b898bdabe7a45b65e61ad9d1.png"></p><p><img src="https://img.zshfoj.com/dc604edf1a7f302f2498ff50e5a56e872b5e1d55949e41b79f4a9bc288b683e5.png"></p><p><img src="https://img.zshfoj.com/1adbfa5f2e2c60630b5505a7c6c27db57a53449ec7bef6ccf70c8c32c4ee0a3b.png"></p><p><img src="https://img.zshfoj.com/67d1b5216431d4e7e2ed82e4635e822bf6faedc6f068477c7f18112117710105.png"></p><h1 id="本页面最后更新：2024-1-25-12-08-39"><a href="#本页面最后更新：2024-1-25-12-08-39" class="headerlink" title="本页面最后更新：2024&#x2F;1&#x2F;25 12:08:39"></a>本页面最后更新：2024&#x2F;1&#x2F;25 12:08:39</h1>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>信息竞赛</tag>
      
      <tag>2024</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023竞赛笔记合集</title>
    <link href="/2023/12/31/2023%E7%AB%9E%E8%B5%9B%E7%AC%94%E8%AE%B0%E5%90%88%E9%9B%86/"/>
    <url>/2023/12/31/2023%E7%AB%9E%E8%B5%9B%E7%AC%94%E8%AE%B0%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="2023-12-6"><a href="#2023-12-6" class="headerlink" title="2023&#x2F;12&#x2F;6"></a>2023&#x2F;12&#x2F;6</h1><p><a href="https://www.luogu.com.cn/paste/s6i2w06i">GESP C++等级测试四级2023 年 9 ⽉</a><br><img src="https://cdn.luogu.com.cn/upload/image_hosting/rlj4hv8h.png"></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/y21b3nr1.png"></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/aqxedlgz.png"></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/k8iaafes.png"></p><h1 id="2023-12-8"><a href="#2023-12-8" class="headerlink" title="2023&#x2F;12&#x2F;8"></a>2023&#x2F;12&#x2F;8</h1><p><a href="https://www.luogu.com.cn/paste/ezkicu9o">GESP C++等级测试四级2023 年 6 ⽉</a></p><hr><h3 id="希尔排序（递减增量排序）"><a href="#希尔排序（递减增量排序）" class="headerlink" title="希尔排序（递减增量排序）"></a>希尔排序（递减增量排序）</h3><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/5wm6aw4i.png"><br><img src="https://cdn.luogu.com.cn/upload/image_hosting/uz4vkwph.png"><br><img src="https://cdn.luogu.com.cn/upload/image_hosting/e917hqto.png"><br><img src="https://cdn.luogu.com.cn/upload/image_hosting/a94h2v16.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shell_sort</span><span class="hljs-params">(T array[], <span class="hljs-type">int</span> length)</span> </span>&#123;<br>  <span class="hljs-type">int</span> h = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (h &lt; length / <span class="hljs-number">3</span>) &#123;<br>    h = <span class="hljs-number">3</span> * h + <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">while</span> (h &gt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h; i &lt; length; i++) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &gt;= h &amp;&amp; array[j] &lt; array[j - h]; j -= h) &#123;<br>        std::<span class="hljs-built_in">swap</span>(array[j], array[j - h]);<br>      &#125;<br>    &#125;<br>    h = h / <span class="hljs-number">3</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/c74uwr88.png"></p><p>代码1（数组）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> *a, <span class="hljs-type">size_t</span> aLen, <span class="hljs-type">const</span> <span class="hljs-type">int</span> *b, <span class="hljs-type">size_t</span> bLen, <span class="hljs-type">int</span> *c)</span> </span>&#123;<br>  <span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (i &lt; aLen &amp;&amp; j &lt; bLen) &#123;<br>    <span class="hljs-keyword">if</span> (b[j] &lt; a[i]) &#123;  <span class="hljs-comment">// &lt;!&gt; 先判断 b[j] &lt; a[i]，保证稳定性</span><br>      c[k] = b[j];<br>      ++j;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      c[k] = a[i];<br>      ++i;<br>    &#125;<br>    ++k;<br>  &#125;<br>  <span class="hljs-comment">// 此时一个数组已空，另一个数组非空，将非空的数组并入 c 中</span><br>  <span class="hljs-keyword">for</span> (; i &lt; aLen; ++i, ++k) c[k] = a[i];<br>  <span class="hljs-keyword">for</span> (; j &lt; bLen; ++j, ++k) c[k] = b[j];<br>&#125;<br></code></pre></td></tr></table></figure><p>代码2（指针）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> *aBegin, <span class="hljs-type">const</span> <span class="hljs-type">int</span> *aEnd, <span class="hljs-type">const</span> <span class="hljs-type">int</span> *bBegin,</span></span><br><span class="hljs-params"><span class="hljs-function">           <span class="hljs-type">const</span> <span class="hljs-type">int</span> *bEnd, <span class="hljs-type">int</span> *c)</span> </span>&#123;<br>  <span class="hljs-keyword">while</span> (aBegin != aEnd &amp;&amp; bBegin != bEnd) &#123;<br>    <span class="hljs-keyword">if</span> (*bBegin &lt; *aBegin) &#123;<br>      *c = *bBegin;<br>      ++bBegin;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      *c = *aBegin;<br>      ++aBegin;<br>    &#125;<br>    ++c;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (; aBegin != aEnd; ++aBegin, ++c) *c = *aBegin;<br>  <span class="hljs-keyword">for</span> (; bBegin != bEnd; ++bBegin, ++c) *c = *bBegin;<br>&#125;<br><br><span class="hljs-comment">//也可使用 &lt;algorithm&gt; 库的 merge 函数，用法与上述指针式写法的相同。</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/3uwny2jd.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (r - l &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-comment">// 分解</span><br>  <span class="hljs-type">int</span> mid = l + ((r - l) &gt;&gt; <span class="hljs-number">1</span>);<br>  <span class="hljs-built_in">merge_sort</span>(a, l, mid), <span class="hljs-built_in">merge_sort</span>(a, mid, r);<br>  <span class="hljs-comment">// 合并</span><br>  <span class="hljs-type">int</span> tmp[<span class="hljs-number">1024</span>] = &#123;&#125;;  <span class="hljs-comment">// 请结合实际情况设置 tmp 数组的长度（与 a 相同），或使用</span><br>                       <span class="hljs-comment">// vector；先将合并的结果放在 tmp 里，再返回到数组 a</span><br>  <span class="hljs-built_in">merge</span>(a + l, a + mid, a + mid, a + r, tmp + l);  <span class="hljs-comment">// pointer-style merge</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt; r; ++i) a[i] = tmp[i];<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/7trlv4o9.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">size_t</span> n)</span> </span>&#123;<br>  <span class="hljs-type">int</span> tmp[<span class="hljs-number">1024</span>] = &#123;&#125;;  <span class="hljs-comment">// 请结合实际情况设置 tmp 数组的长度（与 a 相同），或使用</span><br>                       <span class="hljs-comment">// vector；先将合并的结果放在 tmp 里，再返回到数组 a</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> seg = <span class="hljs-number">1</span>; seg &lt; n; seg &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> left1 = <span class="hljs-number">0</span>; left1 &lt; n - seg;<br>         left1 += seg + seg) &#123;  <span class="hljs-comment">// n - seg: 如果最后只有一个段就不用合并</span><br>      <span class="hljs-type">size_t</span> right1 = left1 + seg;<br>      <span class="hljs-type">size_t</span> left2 = right1;<br>      <span class="hljs-type">size_t</span> right2 = std::<span class="hljs-built_in">min</span>(left2 + seg, n);  <span class="hljs-comment">// &lt;!&gt; 注意最后一个段的边界</span><br>      <span class="hljs-built_in">merge</span>(a + left1, a + right1, a + left2, a + right2,<br>            tmp + left1);  <span class="hljs-comment">// pointer-style merge</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = left1; i &lt; right2; ++i) a[i] = tmp[i];<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/2yb4cj9w.png"></p><h1 id="2023-12-11"><a href="#2023-12-11" class="headerlink" title="2023&#x2F;12&#x2F;11"></a>2023&#x2F;12&#x2F;11</h1><p><a href="https://imgse.com/i/piWmGQK"><img src="https://z1.ax1x.com/2023/12/11/piWmGQK.jpg" alt="piWmGQK.jpg"></a></p><h1 id="2023-12-12"><a href="#2023-12-12" class="headerlink" title="2023&#x2F;12&#x2F;12"></a>2023&#x2F;12&#x2F;12</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// P1192 台阶问题</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> mod=<span class="hljs-number">1e5</span>+<span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> n,k,f[<span class="hljs-number">1000001</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n&gt;&gt;k;<br>f[<span class="hljs-number">0</span>]=f[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<span class="hljs-comment">//递推边界</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=k;j++)<br><span class="hljs-keyword">if</span>(i&gt;=j)<span class="hljs-comment">//当楼梯数大于迈步数 </span><br>f[i]=(f[i]+f[i-j])%mod;<br><br>cout&lt;&lt;f[n]&lt;&lt;endl;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://img.zshfoj.com/d7326e952335b2d618c52f46f7eba7f73befa9ad351f2a382648b7952dc5461c.png"></p><h1 id="2023-12-23"><a href="#2023-12-23" class="headerlink" title="2023&#x2F;12&#x2F;23"></a>2023&#x2F;12&#x2F;23</h1><p><img src="https://img.zshfoj.com/ef521c0ca2756ec4ede5b178d9e75ad72ef89cf3247ce2a930028290b49639df.png" alt="x"></p><p><img src="https://img.zshfoj.com/d62b93818009330b8d64110b39bb51b5d6208be99280217acb0a407b19d75dd0.png"></p><h1 id="本页面最后更新：2023-12-31-23-59-59"><a href="#本页面最后更新：2023-12-31-23-59-59" class="headerlink" title="本页面最后更新：2023&#x2F;12&#x2F;31 23:59:59"></a>本页面最后更新：2023&#x2F;12&#x2F;31 23:59:59</h1>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>信息竞赛</tag>
      
      <tag>2023</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h1 id="欢迎来到Minecraft-Sep的网站"><a href="#欢迎来到Minecraft-Sep的网站" class="headerlink" title="欢迎来到Minecraft-Sep的网站:)"></a>欢迎来到<a href="https://sepiatruck34735.github.io/">Minecraft-Sep的网站</a>:)</h1><h2 id="本网站最后更新-2024-2-1-9-35-02"><a href="#本网站最后更新-2024-2-1-9-35-02" class="headerlink" title="本网站最后更新:2024&#x2F;2&#x2F;1 9:35:02"></a>本网站最后更新:2024&#x2F;2&#x2F;1 9:35:02</h2><p>该网站由<strong>Minecraft-Sep</strong>和<strong>Minecraft-Frp</strong>一起完成，感谢<strong>serverDream</strong>提供软件和操作</p><p>如果你也<strong>like</strong>这个项目，别忘了给这个项目一个大大的赞!</p><h1 id="项目贡献"><a href="#项目贡献" class="headerlink" title="项目贡献:"></a>项目贡献:</h1><h2 id="serverDream-提供源代码和建站"><a href="#serverDream-提供源代码和建站" class="headerlink" title="serverDream(提供源代码和建站)"></a><img src="https://cdn.luogu.com.cn/upload/usericon/332771.png">serverDream(提供源代码和建站)</h2><h2 id="Minecraft-Sep-修改内部元素、网站维护、文章"><a href="#Minecraft-Sep-修改内部元素、网站维护、文章" class="headerlink" title="Minecraft-Sep(修改内部元素、网站维护、文章)"></a><img src="https://cdn.luogu.com.cn/upload/usericon/942118.png">Minecraft-Sep(修改内部元素、网站维护、文章)</h2><h2 id="Minecraft-Frp-文章"><a href="#Minecraft-Frp-文章" class="headerlink" title="Minecraft-Frp(文章)"></a><img src="https://hghjhjhjhjhjhjhj/">Minecraft-Frp(文章)</h2>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>广告</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<div class="markdown-body">这是广告区    </div>]]></content>
    
  </entry>
  
  
  
</search>
